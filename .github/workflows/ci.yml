name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Test suite
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Compile package
        run: python -m compileall opcua_sim

      - name: Run unit tests
        run: |
          set +e
          pytest
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 5 ]; then
            echo "Pytest exited with code 5 (no tests collected). Treating as success."
            exit 0
          fi
          exit $EXIT_CODE

  docker:
    name: Build and push image
    runs-on: ubuntu-latest
    needs: tests
    if: >-
      needs.tests.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Normalize repository name
        id: repo_name
        run: |
          NORMALIZED_REPO=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "NORMALIZED_REPO=${NORMALIZED_REPO}" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=ghcr.io/${NORMALIZED_REPO}" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image tags
        run: |
          echo "LATEST_TAG=${IMAGE_NAME}:latest" >> "$GITHUB_ENV"
          echo "SHA_TAG=${IMAGE_NAME}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Build and push image
        run: |
          docker buildx build \
            --push \
            --tag "$LATEST_TAG" \
            --tag "$SHA_TAG" \
            .
